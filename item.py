import pygame
import random
import math
from fsm import FSM

# Code generated by ChatGPT and edited by Liliana Dhaliwal
# Some code written by Liliana Dhaliwal
# Comments by Liliana Dhaliwal
class Item(pygame.sprite.Sprite):
    MOVE_RANDOMLY = "m_r"
    CAUGHT = "c"
    RUN_AWAY = "r_a"

    MAX_SPEED = 4

    def __init__(self, game, player, screen_width, screen_height):
        super().__init__()

        # Intializes the item

        #image_num = random.randint(0, 4) == 1:
        #self.image = pygame.image.load("Assets/items/item_" + image_num + ".png")

        self.image = pygame.Surface((30, 30))
        self.image.fill((255, 0, 0))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - 30)
        self.rect.y = random.randint(0, screen_height - 30)

        self.x_change = self.MAX_SPEED - random.randint(0, 2 * self.MAX_SPEED)
        self.y_change = self.MAX_SPEED - random.randint(0, 2 * self.MAX_SPEED) 

        self.visible = True

        self.game = game
        self.player = player

        self.speed = 3
        self.direction = random.choice([-1, 1])  

        self.fsm = FSM(self.MOVE_RANDOMLY)
        self.init_fsm()

    # Code writen by Liliana Dhaliwal
    def init_fsm(self):
        self.fsm.add_transition("caught", self.MOVE_RANDOMLY, self.caught, self.CAUGHT)
        self.fsm.add_transition(None, self.MOVE_RANDOMLY, self.move_randomly, self.MOVE_RANDOMLY)
        self.fsm.add_transition("run away", self.MOVE_RANDOMLY, self.run_away, self.RUN_AWAY)
        self.fsm.add_transition("run away", self.RUN_AWAY, self.run_away, self.RUN_AWAY)
        self.fsm.add_transition("caught", self.RUN_AWAY, self.caught, self.CAUGHT)

    # Code writen by Liliana Dhaliwal  
    def get_state(self):
        return self.fsm.current_state
    
    # Code writen by Liliana Dhaliwal
    def update(self, input = None):   
        if self.game.score >= 5 and input != "caught":
            input = "run away"
        if self.get_state() != "c":
            self.fsm.process(input)

    def caught(self):
        self.game.score += 1
        self.visible = False

    # Code written by Liliana Dhaliwal
    def move_randomly(self):
        # Creates a 1-in-7 probability that the direction is changed.
        if random.randint(0, 6) == 1:
            self.x_change += random.randint(-self.MAX_SPEED, self.MAX_SPEED)

            self.x_change = min(self.x_change, self.MAX_SPEED)
            self.x_change = max(self.x_change, -self.MAX_SPEED)
            
            self.y_change += random.randint(-self.MAX_SPEED, self.MAX_SPEED)

            self.y_change = min(self.y_change, self.MAX_SPEED)
            self.y_change = max(self.y_change, -self.MAX_SPEED)

        self.rect.x += self.x_change
        self.rect.y += self.y_change

        if (self.rect.x <= 0 and self.x_change < 0) or (self.rect.x  >= 800 - 30):
            self.x_change = -self.x_change

        if (self.rect.y <= 0 and self.y_change < 0) or (self.rect.y >= 600 - 30):
            self.y_change = -self.y_change

    def run_away(self):
        # Calculate the distance between the item and the player
        distance = math.sqrt((self.player.rect.x - self.rect.x) ** 2 + (self.player.rect.y - self.rect.y) ** 2)

        # Calculate the direction to move away from the player
        dx = (self.rect.x - self.player.rect.x) / distance
        dy = (self.rect.y - self.player.rect.y) / distance

        if (self.rect.x <= 0 and dx < 0) or (self.rect.x  >= 800 - 30):
            dx = -dx

        if (self.rect.y <= 0 and dy < 0) or (self.rect.y >= 600 - 30):
            dy = -dy

        if self.rect.x == 0 or self.rect.x == 800 - 30:
            dy *= 2
        if self.rect.y == 0 or self.rect.y == 600 - 30:
            dx *= 2   
        
        # Update the item's position based on the direction and speed
        self.rect.x += self.speed * dx
        self.rect.y += self.speed * dy
